// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Model.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountId"));

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("createdAt");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<int?>("ExpireMinute")
                        .HasColumnType("int")
                        .HasColumnName("expireMinute");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("passwordHash");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("refreshToken");

                    b.Property<int?>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updatedAt");

                    b.HasKey("AccountId");

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            AccountId = 1L,
                            CreatedAt = new DateOnly(2025, 3, 1),
                            Email = "admin@email.com",
                            ExpireMinute = 30,
                            PasswordHash = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            Role = 1,
                            Status = 1,
                            UpdatedAt = new DateOnly(2025, 3, 1)
                        },
                        new
                        {
                            AccountId = 2L,
                            CreatedAt = new DateOnly(2025, 1, 1),
                            Email = "manager@email.com",
                            ExpireMinute = 30,
                            PasswordHash = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            Role = 2,
                            Status = 1,
                            UpdatedAt = new DateOnly(2025, 5, 1)
                        },
                        new
                        {
                            AccountId = 3L,
                            CreatedAt = new DateOnly(2025, 5, 1),
                            Email = "staff01@email.com",
                            ExpireMinute = 30,
                            PasswordHash = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            Role = 3,
                            Status = 1,
                            UpdatedAt = new DateOnly(2025, 5, 1)
                        },
                        new
                        {
                            AccountId = 6L,
                            CreatedAt = new DateOnly(2025, 5, 1),
                            Email = "staff02@email.com",
                            ExpireMinute = 30,
                            PasswordHash = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            Role = 3,
                            Status = 1,
                            UpdatedAt = new DateOnly(2025, 5, 1)
                        },
                        new
                        {
                            AccountId = 9L,
                            CreatedAt = new DateOnly(2025, 5, 1),
                            Email = "staff03@email.com",
                            ExpireMinute = 30,
                            PasswordHash = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            Role = 3,
                            Status = 1,
                            UpdatedAt = new DateOnly(2025, 5, 1)
                        },
                        new
                        {
                            AccountId = 4L,
                            CreatedAt = new DateOnly(2025, 4, 1),
                            Email = "cus01@email.com",
                            ExpireMinute = 30,
                            PasswordHash = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            Role = 0,
                            Status = 1,
                            UpdatedAt = new DateOnly(2025, 5, 1)
                        },
                        new
                        {
                            AccountId = 8L,
                            CreatedAt = new DateOnly(2025, 4, 1),
                            Email = "cus03@email.com",
                            ExpireMinute = 30,
                            PasswordHash = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            Role = 0,
                            Status = 1,
                            UpdatedAt = new DateOnly(2025, 5, 1)
                        },
                        new
                        {
                            AccountId = 7L,
                            CreatedAt = new DateOnly(2025, 4, 1),
                            Email = "cus04@email.com",
                            ExpireMinute = 30,
                            PasswordHash = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            Role = 0,
                            Status = 1,
                            UpdatedAt = new DateOnly(2025, 5, 1)
                        },
                        new
                        {
                            AccountId = 5L,
                            CreatedAt = new DateOnly(2025, 2, 1),
                            Email = "cus02@email.com",
                            ExpireMinute = 30,
                            PasswordHash = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            Role = 0,
                            Status = 1,
                            UpdatedAt = new DateOnly(2025, 5, 1)
                        });
                });

            modelBuilder.Entity("Domain.Model.AccountProfile", b =>
                {
                    b.Property<long>("AccountProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("createdAt");

                    b.Property<string>("Fullname")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("fullname");

                    b.Property<int?>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<string>("Images")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("images");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updatedAt");

                    b.HasKey("AccountProfileId");

                    b.ToTable("AccountProfile", (string)null);

                    b.HasData(
                        new
                        {
                            AccountProfileId = 1L,
                            Address = "HCM",
                            CreatedAt = new DateOnly(2025, 3, 1),
                            Fullname = "Admin",
                            Gender = 0,
                            Phone = "0123456789",
                            UpdatedAt = new DateOnly(2025, 3, 1)
                        },
                        new
                        {
                            AccountProfileId = 2L,
                            Address = "HCM",
                            CreatedAt = new DateOnly(2025, 1, 1),
                            Fullname = "Manager",
                            Gender = 0,
                            Phone = "0123456789",
                            UpdatedAt = new DateOnly(2025, 5, 1)
                        },
                        new
                        {
                            AccountProfileId = 3L,
                            Address = "HCM",
                            CreatedAt = new DateOnly(2025, 5, 1),
                            Fullname = "Staff 1",
                            Gender = 1,
                            Phone = "0123456789",
                            UpdatedAt = new DateOnly(2025, 5, 1)
                        },
                        new
                        {
                            AccountProfileId = 6L,
                            Address = "HCM",
                            CreatedAt = new DateOnly(2025, 5, 1),
                            Fullname = "Staff 2",
                            Gender = 0,
                            Phone = "0123456789",
                            UpdatedAt = new DateOnly(2025, 5, 1)
                        },
                        new
                        {
                            AccountProfileId = 4L,
                            Address = "HCM",
                            CreatedAt = new DateOnly(2025, 4, 1),
                            Fullname = "Customer 1",
                            Gender = 1,
                            Phone = "0123456789",
                            UpdatedAt = new DateOnly(2025, 5, 1)
                        },
                        new
                        {
                            AccountProfileId = 8L,
                            Address = "HCM",
                            CreatedAt = new DateOnly(2025, 4, 1),
                            Fullname = "Customer 3",
                            Gender = 0,
                            Phone = "0123456789",
                            UpdatedAt = new DateOnly(2025, 5, 1)
                        },
                        new
                        {
                            AccountProfileId = 7L,
                            Address = "HCM",
                            CreatedAt = new DateOnly(2025, 4, 1),
                            Fullname = "Customer 4",
                            Gender = 0,
                            Phone = "0123456789",
                            UpdatedAt = new DateOnly(2025, 5, 1)
                        },
                        new
                        {
                            AccountProfileId = 5L,
                            Address = "HCM",
                            CreatedAt = new DateOnly(2025, 2, 1),
                            Fullname = "Customer 2",
                            Gender = 1,
                            Phone = "0123456789",
                            UpdatedAt = new DateOnly(2025, 5, 1)
                        },
                        new
                        {
                            AccountProfileId = 9L,
                            Address = "HCM",
                            CreatedAt = new DateOnly(2025, 2, 1),
                            Fullname = "Staff 3",
                            Gender = 0,
                            Phone = "0123456789",
                            UpdatedAt = new DateOnly(2025, 5, 1)
                        });
                });

            modelBuilder.Entity("Domain.Model.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("categoryName");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1L,
                            CategoryName = "Vegetable"
                        },
                        new
                        {
                            CategoryId = 3L,
                            CategoryName = "IOT 1"
                        },
                        new
                        {
                            CategoryId = 4L,
                            CategoryName = "Divice 1"
                        },
                        new
                        {
                            CategoryId = 2L,
                            CategoryName = "Fruit"
                        });
                });

            modelBuilder.Entity("Domain.Model.Crop", b =>
                {
                    b.Property<long>("CropId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CropId"));

                    b.Property<string>("CropName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cropName");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("HarvestDate")
                        .HasColumnType("date")
                        .HasColumnName("harvestDate");

                    b.Property<DateOnly?>("PlantingDate")
                        .HasColumnType("date")
                        .HasColumnName("plantingDate");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("CropId");

                    b.ToTable("Crop", (string)null);

                    b.HasData(
                        new
                        {
                            CropId = 1L,
                            CropName = "Cop 01",
                            Description = "3x3 m2",
                            HarvestDate = new DateOnly(2025, 4, 5),
                            PlantingDate = new DateOnly(2025, 3, 1),
                            Quantity = 100,
                            Status = 1
                        },
                        new
                        {
                            CropId = 2L,
                            CropName = "Cop 02",
                            Description = "2x3 m2",
                            HarvestDate = new DateOnly(2025, 4, 5),
                            PlantingDate = new DateOnly(2025, 3, 4),
                            Quantity = 100,
                            Status = 1
                        },
                        new
                        {
                            CropId = 3L,
                            CropName = "Cop 03",
                            Description = "3x2 m2",
                            HarvestDate = new DateOnly(2025, 4, 6),
                            PlantingDate = new DateOnly(2025, 4, 4),
                            Quantity = 100,
                            Status = 1
                        },
                        new
                        {
                            CropId = 4L,
                            CropName = "Cop 04",
                            Description = "3x5 m2",
                            HarvestDate = new DateOnly(2025, 4, 3),
                            PlantingDate = new DateOnly(2025, 3, 5),
                            Quantity = 100,
                            Status = 1
                        },
                        new
                        {
                            CropId = 5L,
                            CropName = "Cop 05",
                            Description = "4x3 m2",
                            HarvestDate = new DateOnly(2025, 4, 3),
                            PlantingDate = new DateOnly(2025, 3, 5),
                            Quantity = 100,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Domain.Model.CropRequirement", b =>
                {
                    b.Property<long>("RequirementId")
                        .HasColumnType("bigint");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint")
                        .HasColumnName("deviceID");

                    b.Property<string>("EstimatedDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("estimatedDate");

                    b.Property<string>("Fertilizer")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fertilizer");

                    b.Property<decimal?>("Moisture")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("moisture");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("temperature");

                    b.HasKey("RequirementId");

                    b.HasIndex("DeviceId");

                    b.ToTable("CropRequirement");

                    b.HasData(
                        new
                        {
                            RequirementId = 1L,
                            DeviceId = 1L,
                            EstimatedDate = "60",
                            Fertilizer = "NPK",
                            Moisture = 1m,
                            Temperature = 29m
                        },
                        new
                        {
                            RequirementId = 2L,
                            DeviceId = 3L,
                            EstimatedDate = "45",
                            Fertilizer = "NPK",
                            Moisture = 1m,
                            Temperature = 22m
                        },
                        new
                        {
                            RequirementId = 3L,
                            DeviceId = 2L,
                            EstimatedDate = "30",
                            Fertilizer = "NPK",
                            Moisture = 1m,
                            Temperature = 26m
                        });
                });

            modelBuilder.Entity("Domain.Model.DailyLog", b =>
                {
                    b.Property<long>("TrackingId")
                        .HasColumnType("bigint");

                    b.Property<long>("AssignedTo")
                        .HasColumnType("bigint")
                        .HasColumnName("assignedTo");

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("createdAt");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("notes");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updatedAt");

                    b.HasKey("TrackingId");

                    b.HasIndex("AssignedTo");

                    b.ToTable("DailyLog", (string)null);

                    b.HasData(
                        new
                        {
                            TrackingId = 1L,
                            AssignedTo = 3L,
                            CreatedAt = new DateOnly(2025, 4, 5),
                            Date = new DateOnly(2025, 4, 5),
                            Notes = "Hoat dong binh thuong",
                            Status = 1,
                            UpdatedAt = new DateOnly(2025, 4, 5)
                        },
                        new
                        {
                            TrackingId = 2L,
                            AssignedTo = 6L,
                            CreatedAt = new DateOnly(2025, 4, 6),
                            Date = new DateOnly(2025, 4, 6),
                            Notes = "Hoat dong binh thuong",
                            Status = 1,
                            UpdatedAt = new DateOnly(2025, 4, 6)
                        },
                        new
                        {
                            TrackingId = 3L,
                            AssignedTo = 9L,
                            CreatedAt = new DateOnly(2025, 4, 7),
                            Date = new DateOnly(2025, 4, 7),
                            Notes = "Hoat dong binh thuong",
                            Status = 1,
                            UpdatedAt = new DateOnly(2025, 4, 7)
                        });
                });

            modelBuilder.Entity("Domain.Model.Farm", b =>
                {
                    b.Property<long>("FarmDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FarmDetailsId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("accountID");

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("createdAt");

                    b.Property<string>("FarmName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("farmName");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updatedAt");

                    b.HasKey("FarmDetailsId");

                    b.HasIndex("AccountId");

                    b.ToTable("Farm", (string)null);

                    b.HasData(
                        new
                        {
                            FarmDetailsId = 1L,
                            AccountId = 4L,
                            CreatedAt = new DateOnly(2025, 2, 1),
                            FarmName = "Happy Farm",
                            Location = "Q1, HCM",
                            UpdatedAt = new DateOnly(2025, 3, 1)
                        },
                        new
                        {
                            FarmDetailsId = 2L,
                            AccountId = 5L,
                            CreatedAt = new DateOnly(2025, 2, 1),
                            FarmName = "Sky Garden",
                            Location = "Thu Duc, HCM",
                            UpdatedAt = new DateOnly(2025, 3, 2)
                        },
                        new
                        {
                            FarmDetailsId = 3L,
                            AccountId = 7L,
                            CreatedAt = new DateOnly(2025, 2, 1),
                            FarmName = "Hidden Planting",
                            Location = "Binh Tan, HCM",
                            UpdatedAt = new DateOnly(2025, 3, 5)
                        });
                });

            modelBuilder.Entity("Domain.Model.FarmActivity", b =>
                {
                    b.Property<int>("FarmActivitiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FarmActivitiesId"));

                    b.Property<int?>("ActivityType")
                        .HasColumnType("int")
                        .HasColumnName("activityType");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("FarmActivitiesId");

                    b.ToTable("FarmActivitie");

                    b.HasData(
                        new
                        {
                            FarmActivitiesId = 1,
                            ActivityType = 1,
                            EndDate = new DateOnly(2025, 4, 1),
                            StartDate = new DateOnly(2025, 3, 1),
                            Status = 1
                        },
                        new
                        {
                            FarmActivitiesId = 2,
                            ActivityType = 1,
                            EndDate = new DateOnly(2025, 4, 11),
                            StartDate = new DateOnly(2025, 5, 4),
                            Status = 1
                        },
                        new
                        {
                            FarmActivitiesId = 3,
                            ActivityType = 1,
                            EndDate = new DateOnly(2025, 4, 3),
                            StartDate = new DateOnly(2025, 5, 4),
                            Status = 1
                        });
                });

            modelBuilder.Entity("Domain.Model.Feedback", b =>
                {
                    b.Property<long>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FeedbackId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comment");

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("createdAt");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customerID");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("FeedbackId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Feedback", (string)null);

                    b.HasData(
                        new
                        {
                            FeedbackId = 1L,
                            Comment = "App very good, but load data slow",
                            CreatedAt = new DateOnly(2025, 4, 3),
                            CustomerId = 4L,
                            Rating = 4
                        },
                        new
                        {
                            FeedbackId = 2L,
                            Comment = "My avt so cute <3",
                            CreatedAt = new DateOnly(2025, 4, 10),
                            CustomerId = 7L,
                            Rating = 5
                        },
                        new
                        {
                            FeedbackId = 3L,
                            Comment = "Test FeedBack <3",
                            CreatedAt = new DateOnly(2025, 3, 3),
                            CustomerId = 8L,
                            Rating = 5
                        });
                });

            modelBuilder.Entity("Domain.Model.Inventory", b =>
                {
                    b.Property<long>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("InventoryId"));

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("createdAt");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("expiryDate");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("productId");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int?>("StockQuantity")
                        .HasColumnType("int")
                        .HasColumnName("stockQuantity");

                    b.HasKey("InventoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Inventory", (string)null);

                    b.HasData(
                        new
                        {
                            InventoryId = 1L,
                            CreatedAt = new DateOnly(2025, 3, 1),
                            ExpiryDate = new DateOnly(2025, 6, 1),
                            Location = "HCM",
                            ProductId = 1L,
                            Status = 1,
                            StockQuantity = 1000
                        },
                        new
                        {
                            InventoryId = 2L,
                            CreatedAt = new DateOnly(2025, 3, 11),
                            ExpiryDate = new DateOnly(2025, 6, 1),
                            Location = "HCM",
                            ProductId = 2L,
                            Status = 1,
                            StockQuantity = 500
                        },
                        new
                        {
                            InventoryId = 3L,
                            CreatedAt = new DateOnly(2025, 3, 8),
                            ExpiryDate = new DateOnly(2025, 6, 1),
                            Location = "HCM",
                            ProductId = 3L,
                            Status = 1,
                            StockQuantity = 666
                        });
                });

            modelBuilder.Entity("Domain.Model.IoTdevice", b =>
                {
                    b.Property<long>("IoTdevicesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IoTdevicesId"));

                    b.Property<string>("DeviceName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("deviceName");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("deviceType");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("expiryDate");

                    b.Property<long>("FarmDetailsId")
                        .HasColumnType("bigint")
                        .HasColumnName("farmDetailsID");

                    b.Property<DateOnly?>("LastUpdate")
                        .HasColumnType("date")
                        .HasColumnName("lastUpdate");

                    b.Property<string>("SensorValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("sensorValue");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Unit")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("unit");

                    b.HasKey("IoTdevicesId");

                    b.HasIndex("FarmDetailsId");

                    b.ToTable("IoTDevice", (string)null);

                    b.HasData(
                        new
                        {
                            IoTdevicesId = 1L,
                            DeviceName = "Thermocouple - 1",
                            DeviceType = "Temperature IC",
                            ExpiryDate = new DateOnly(2025, 4, 3),
                            FarmDetailsId = 2L,
                            LastUpdate = new DateOnly(2025, 5, 4),
                            Status = 1
                        },
                        new
                        {
                            IoTdevicesId = 2L,
                            DeviceName = "LM393 - 1",
                            DeviceType = "Humidity measurement IC",
                            ExpiryDate = new DateOnly(2025, 4, 3),
                            FarmDetailsId = 1L,
                            LastUpdate = new DateOnly(2025, 5, 4),
                            Status = 1
                        },
                        new
                        {
                            IoTdevicesId = 3L,
                            DeviceName = "LM393 - 2",
                            DeviceType = "Humidity measurement IC",
                            ExpiryDate = new DateOnly(2025, 4, 3),
                            FarmDetailsId = 2L,
                            LastUpdate = new DateOnly(2025, 5, 4),
                            Status = 1
                        },
                        new
                        {
                            IoTdevicesId = 4L,
                            DeviceName = "Thermocouple  - 2",
                            DeviceType = "Temperature IC",
                            ExpiryDate = new DateOnly(2025, 4, 3),
                            FarmDetailsId = 3L,
                            LastUpdate = new DateOnly(2025, 5, 4),
                            Status = 1
                        },
                        new
                        {
                            IoTdevicesId = 5L,
                            DeviceName = "Thermocouple  - 3",
                            DeviceType = "Temperature IC",
                            ExpiryDate = new DateOnly(2025, 4, 3),
                            FarmDetailsId = 1L,
                            LastUpdate = new DateOnly(2025, 5, 4),
                            Status = 1
                        },
                        new
                        {
                            IoTdevicesId = 6L,
                            DeviceName = "LM393 - 3",
                            DeviceType = "Humidity measurement IC",
                            ExpiryDate = new DateOnly(2025, 4, 3),
                            FarmDetailsId = 3L,
                            LastUpdate = new DateOnly(2025, 5, 4),
                            Status = 1
                        },
                        new
                        {
                            IoTdevicesId = 7L,
                            DeviceName = "Soil Moisture Sensor 1",
                            DeviceType = "Soil Moisture Sensor IC",
                            ExpiryDate = new DateOnly(2025, 4, 3),
                            FarmDetailsId = 1L,
                            LastUpdate = new DateOnly(2025, 5, 4),
                            Status = 1
                        },
                        new
                        {
                            IoTdevicesId = 8L,
                            DeviceName = "Soil Moisture Sensor 2",
                            DeviceType = "Soil Moisture Sensor IC",
                            ExpiryDate = new DateOnly(2025, 4, 3),
                            FarmDetailsId = 2L,
                            LastUpdate = new DateOnly(2025, 5, 4),
                            Status = 1
                        },
                        new
                        {
                            IoTdevicesId = 9L,
                            DeviceName = "Soil Moisture Sensor 3",
                            DeviceType = "Soil Moisture Sensor IC",
                            ExpiryDate = new DateOnly(2025, 4, 3),
                            FarmDetailsId = 3L,
                            LastUpdate = new DateOnly(2025, 5, 4),
                            Status = 1
                        });
                });

            modelBuilder.Entity("Domain.Model.IoTdeviceLog", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LogId"));

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("createdAt");

                    b.Property<long>("IoTdevice")
                        .HasColumnType("bigint")
                        .HasColumnName("ioTDevice");

                    b.Property<long>("TrackingId")
                        .HasColumnType("bigint")
                        .HasColumnName("trackingID");

                    b.HasKey("LogId");

                    b.HasIndex("IoTdevice");

                    b.HasIndex("TrackingId");

                    b.ToTable("IoTDeviceLog", (string)null);

                    b.HasData(
                        new
                        {
                            LogId = 1L,
                            CreatedAt = new DateOnly(2025, 4, 5),
                            IoTdevice = 1L,
                            TrackingId = 1L
                        },
                        new
                        {
                            LogId = 2L,
                            CreatedAt = new DateOnly(2025, 4, 6),
                            IoTdevice = 2L,
                            TrackingId = 2L
                        },
                        new
                        {
                            LogId = 3L,
                            CreatedAt = new DateOnly(2025, 4, 7),
                            IoTdevice = 3L,
                            TrackingId = 3L
                        });
                });

            modelBuilder.Entity("Domain.Model.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("createdAt");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customerID");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("shippingAddress");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totalPrice");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updatedAt");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order", (string)null);

                    b.HasData(
                        new
                        {
                            OrderId = 1L,
                            CreatedAt = new DateOnly(2025, 3, 1),
                            CustomerId = 8L,
                            ShippingAddress = "HCM",
                            Status = 1,
                            TotalPrice = 200m,
                            UpdatedAt = new DateOnly(2025, 3, 1)
                        },
                        new
                        {
                            OrderId = 2L,
                            CreatedAt = new DateOnly(2025, 3, 1),
                            CustomerId = 8L,
                            ShippingAddress = "HCM",
                            Status = 1,
                            TotalPrice = 105m,
                            UpdatedAt = new DateOnly(2025, 3, 1)
                        },
                        new
                        {
                            OrderId = 3L,
                            CreatedAt = new DateOnly(2025, 3, 1),
                            CustomerId = 8L,
                            ShippingAddress = "HCM",
                            Status = 1,
                            TotalPrice = 315m,
                            UpdatedAt = new DateOnly(2025, 3, 1)
                        });
                });

            modelBuilder.Entity("Domain.Model.OrderDetail", b =>
                {
                    b.Property<long>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderDetailId"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("orderID");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("productID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("unitPrice");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail", (string)null);

                    b.HasData(
                        new
                        {
                            OrderDetailId = 1L,
                            OrderId = 1L,
                            ProductId = 1L,
                            Quantity = 20,
                            UnitPrice = 10m
                        },
                        new
                        {
                            OrderDetailId = 2L,
                            OrderId = 1L,
                            ProductId = 2L,
                            Quantity = 10,
                            UnitPrice = 15m
                        },
                        new
                        {
                            OrderDetailId = 3L,
                            OrderId = 1L,
                            ProductId = 2L,
                            Quantity = 21,
                            UnitPrice = 10m
                        });
                });

            modelBuilder.Entity("Domain.Model.Payment", b =>
                {
                    b.Property<long>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VnPayResponseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId");

                    b.ToTable("Payment", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentId = 1L,
                            Amount = 100000m,
                            CreateDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 1L,
                            PaymentMethod = "VNPay",
                            PaymentTime = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Success = true,
                            TransactionId = "VNPay01",
                            VnPayResponseCode = "VNPayPayment01"
                        },
                        new
                        {
                            PaymentId = 2L,
                            Amount = 150000m,
                            CreateDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 2L,
                            PaymentMethod = "VNPay",
                            PaymentTime = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Success = false,
                            TransactionId = "VNPay02",
                            VnPayResponseCode = "VNPayPayment02"
                        },
                        new
                        {
                            PaymentId = 3L,
                            Amount = 315000m,
                            CreateDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 3L,
                            PaymentMethod = "VNPay",
                            PaymentTime = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Success = false,
                            TransactionId = "VNPay03",
                            VnPayResponseCode = "VNPayPayment03"
                        });
                });

            modelBuilder.Entity("Domain.Model.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("categoryID");

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Images")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("images");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("productName");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int?>("StockQuantity")
                        .HasColumnType("int")
                        .HasColumnName("stockQuantity");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            CategoryId = 1L,
                            CreatedAt = new DateOnly(2025, 2, 1),
                            Description = "Rau Den",
                            Price = 10000m,
                            ProductName = "Vegetable 1",
                            Status = 1,
                            StockQuantity = 10000,
                            UpdatedAt = new DateOnly(2025, 2, 1)
                        },
                        new
                        {
                            ProductId = 2L,
                            CategoryId = 1L,
                            CreatedAt = new DateOnly(2025, 2, 1),
                            Description = "Salad",
                            Price = 15000m,
                            ProductName = "Vegetable 2",
                            Status = 1,
                            StockQuantity = 10000,
                            UpdatedAt = new DateOnly(2025, 2, 1)
                        },
                        new
                        {
                            ProductId = 3L,
                            CategoryId = 1L,
                            CreatedAt = new DateOnly(2025, 2, 1),
                            Description = "Dau Ha Lan",
                            Price = 20000m,
                            ProductName = "Vegetable 3",
                            Status = 1,
                            StockQuantity = 10000,
                            UpdatedAt = new DateOnly(2025, 2, 1)
                        },
                        new
                        {
                            ProductId = 4L,
                            CategoryId = 1L,
                            CreatedAt = new DateOnly(2025, 2, 1),
                            Description = "Ca chua",
                            Price = 35000m,
                            ProductName = "Fruit 1",
                            Status = 1,
                            StockQuantity = 10000,
                            UpdatedAt = new DateOnly(2025, 2, 1)
                        },
                        new
                        {
                            ProductId = 5L,
                            CategoryId = 1L,
                            CreatedAt = new DateOnly(2025, 2, 1),
                            Description = "Dua Hau",
                            Price = 55000m,
                            ProductName = "Fruit 2",
                            Status = 1,
                            StockQuantity = 10000,
                            UpdatedAt = new DateOnly(2025, 2, 1)
                        });
                });

            modelBuilder.Entity("Domain.Model.Schedule", b =>
                {
                    b.Property<long>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ScheduleId"));

                    b.Property<long>("AssignedTo")
                        .HasColumnType("bigint")
                        .HasColumnName("assignedTo");

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("createdAt");

                    b.Property<long>("CropId")
                        .HasColumnType("bigint")
                        .HasColumnName("cropID");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<int>("FarmActivityId")
                        .HasColumnType("int")
                        .HasColumnName("farmActivityID");

                    b.Property<long>("FarmDetailsId")
                        .HasColumnType("bigint")
                        .HasColumnName("farmDetailsID");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date")
                        .HasColumnName("updatedAt");

                    b.HasKey("ScheduleId");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("CropId");

                    b.HasIndex("FarmActivityId");

                    b.HasIndex("FarmDetailsId");

                    b.ToTable("Schedule", (string)null);

                    b.HasData(
                        new
                        {
                            ScheduleId = 1L,
                            AssignedTo = 3L,
                            CreatedAt = new DateOnly(2025, 3, 1),
                            CropId = 1L,
                            EndDate = new DateOnly(2025, 4, 3),
                            FarmActivityId = 1,
                            FarmDetailsId = 1L,
                            StartDate = new DateOnly(2025, 3, 1),
                            Status = 1,
                            UpdatedAt = new DateOnly(2025, 3, 1)
                        },
                        new
                        {
                            ScheduleId = 2L,
                            AssignedTo = 9L,
                            CreatedAt = new DateOnly(2025, 3, 1),
                            CropId = 2L,
                            EndDate = new DateOnly(2025, 4, 11),
                            FarmActivityId = 2,
                            FarmDetailsId = 2L,
                            StartDate = new DateOnly(2025, 5, 4),
                            Status = 1,
                            UpdatedAt = new DateOnly(2025, 3, 1)
                        },
                        new
                        {
                            ScheduleId = 3L,
                            AssignedTo = 6L,
                            CreatedAt = new DateOnly(2025, 3, 1),
                            CropId = 3L,
                            EndDate = new DateOnly(2025, 4, 3),
                            FarmActivityId = 3,
                            FarmDetailsId = 3L,
                            StartDate = new DateOnly(2025, 5, 4),
                            Status = 1,
                            UpdatedAt = new DateOnly(2025, 3, 1)
                        });
                });

            modelBuilder.Entity("Domain.Model.AccountProfile", b =>
                {
                    b.HasOne("Domain.Model.Account", "AccountProfileNavigation")
                        .WithOne("AccountProfile")
                        .HasForeignKey("Domain.Model.AccountProfile", "AccountProfileId")
                        .IsRequired();

                    b.Navigation("AccountProfileNavigation");
                });

            modelBuilder.Entity("Domain.Model.CropRequirement", b =>
                {
                    b.HasOne("Domain.Model.IoTdevice", "Device")
                        .WithMany("CropRequirements")
                        .HasForeignKey("DeviceId")
                        .IsRequired();

                    b.HasOne("Domain.Model.Crop", "Requirement")
                        .WithOne("CropRequirement")
                        .HasForeignKey("Domain.Model.CropRequirement", "RequirementId")
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("Domain.Model.DailyLog", b =>
                {
                    b.HasOne("Domain.Model.Account", "AssignedToNavigation")
                        .WithMany("DailyLogs")
                        .HasForeignKey("AssignedTo")
                        .IsRequired();

                    b.HasOne("Domain.Model.Schedule", "Tracking")
                        .WithOne("DailyLog")
                        .HasForeignKey("Domain.Model.DailyLog", "TrackingId")
                        .IsRequired();

                    b.Navigation("AssignedToNavigation");

                    b.Navigation("Tracking");
                });

            modelBuilder.Entity("Domain.Model.Farm", b =>
                {
                    b.HasOne("Domain.Model.Account", "Account")
                        .WithMany("Farms")
                        .HasForeignKey("AccountId")
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Model.Feedback", b =>
                {
                    b.HasOne("Domain.Model.Account", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Model.Inventory", b =>
                {
                    b.HasOne("Domain.Model.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Inventory_Product_productID");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Model.IoTdevice", b =>
                {
                    b.HasOne("Domain.Model.Farm", "FarmDetails")
                        .WithMany("IoTdevices")
                        .HasForeignKey("FarmDetailsId")
                        .IsRequired();

                    b.Navigation("FarmDetails");
                });

            modelBuilder.Entity("Domain.Model.IoTdeviceLog", b =>
                {
                    b.HasOne("Domain.Model.IoTdevice", "IoTdeviceNavigation")
                        .WithMany("IoTdeviceLogs")
                        .HasForeignKey("IoTdevice")
                        .IsRequired()
                        .HasConstraintName("FKIoTDeviceL440028");

                    b.HasOne("Domain.Model.DailyLog", "Tracking")
                        .WithMany("IoTdeviceLogs")
                        .HasForeignKey("TrackingId")
                        .IsRequired();

                    b.Navigation("IoTdeviceNavigation");

                    b.Navigation("Tracking");
                });

            modelBuilder.Entity("Domain.Model.Order", b =>
                {
                    b.HasOne("Domain.Model.Account", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("Domain.Model.Feedback", "OrderNavigation")
                        .WithOne("Order")
                        .HasForeignKey("Domain.Model.Order", "OrderId")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderNavigation");
                });

            modelBuilder.Entity("Domain.Model.OrderDetail", b =>
                {
                    b.HasOne("Domain.Model.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.HasOne("Domain.Model.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Model.Payment", b =>
                {
                    b.HasOne("Domain.Model.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Model.Product", b =>
                {
                    b.HasOne("Domain.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired();

                    b.HasOne("Domain.Model.Crop", "ProductNavigation")
                        .WithOne("Product")
                        .HasForeignKey("Domain.Model.Product", "ProductId")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ProductNavigation");
                });

            modelBuilder.Entity("Domain.Model.Schedule", b =>
                {
                    b.HasOne("Domain.Model.Account", "AssignedToNavigation")
                        .WithMany("Schedules")
                        .HasForeignKey("AssignedTo")
                        .IsRequired();

                    b.HasOne("Domain.Model.Crop", "Crop")
                        .WithMany("Schedules")
                        .HasForeignKey("CropId")
                        .IsRequired();

                    b.HasOne("Domain.Model.FarmActivity", "FarmActivity")
                        .WithMany("Schedules")
                        .HasForeignKey("FarmActivityId")
                        .IsRequired();

                    b.HasOne("Domain.Model.Farm", "FarmDetails")
                        .WithMany("Schedules")
                        .HasForeignKey("FarmDetailsId")
                        .IsRequired();

                    b.Navigation("AssignedToNavigation");

                    b.Navigation("Crop");

                    b.Navigation("FarmActivity");

                    b.Navigation("FarmDetails");
                });

            modelBuilder.Entity("Domain.Model.Account", b =>
                {
                    b.Navigation("AccountProfile");

                    b.Navigation("DailyLogs");

                    b.Navigation("Farms");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Domain.Model.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Model.Crop", b =>
                {
                    b.Navigation("CropRequirement");

                    b.Navigation("Product");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Domain.Model.DailyLog", b =>
                {
                    b.Navigation("IoTdeviceLogs");
                });

            modelBuilder.Entity("Domain.Model.Farm", b =>
                {
                    b.Navigation("IoTdevices");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Domain.Model.FarmActivity", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Domain.Model.Feedback", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Model.IoTdevice", b =>
                {
                    b.Navigation("CropRequirements");

                    b.Navigation("IoTdeviceLogs");
                });

            modelBuilder.Entity("Domain.Model.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Model.Product", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Domain.Model.Schedule", b =>
                {
                    b.Navigation("DailyLog");
                });
#pragma warning restore 612, 618
        }
    }
}
